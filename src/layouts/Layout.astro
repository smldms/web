---
interface Props {
  title?: string;
  description?: string;
}

const { 
  title = "SMLDMS | Digital Artist & Creator", 
  description = "Portfolio of SMLDMS, digital artist specializing in generative art, experimental photography, and audiovisual performances."
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <title>{title}</title>
  </head>
  <body>
    <div id="p5-container"></div>
    <div id="noise-overlay"></div>
    <div id="content">
      <slot />
    </div>
    <script src="../scripts/p5-background.js"></script>
  </body>
</html>

<style is:global>
  :root {
    --color-bg: #000000;
    --color-text: #f5f5f5;
    --color-accent: #00ff99;
    --color-secondary: #ff00ff;
    --font-family: 'Space Grotesk', sans-serif;
    --glitch-duration: 0.8s;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html {
    font-family: var(--font-family);
    background-color: var(--color-bg);
    color: var(--color-text);
    scroll-behavior: smooth;
  }

  body {
    width: 100%;
    min-height: 100vh;
    overflow-x: hidden;
    position: relative;
  }

  #p5-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    opacity: 0.2;
  }

  #noise-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('/noise.png');
    background-size: cover;
    opacity: 0.05;
    pointer-events: none;
    z-index: 1;
  }

  #content {
    position: relative;
    z-index: 2;
  }

  a {
    color: var(--color-text);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  a:hover {
    color: var(--color-accent);
  }

  .container {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .glitch {
    position: relative;
    display: inline-block;
  }

  .glitch::before,
  .glitch::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.8;
  }

  .glitch::before {
    color: var(--color-accent);
    animation: glitch-effect var(--glitch-duration) infinite;
    clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
    transform: translate(-0.025em, -0.0125em);
    opacity: 0.8;
  }

  .glitch::after {
    color: var(--color-secondary);
    animation: glitch-effect var(--glitch-duration) infinite reverse;
    clip-path: polygon(0 80%, 100% 20%, 100% 100%, 0 100%);
    transform: translate(0.025em, 0.0125em);
    opacity: 0.8;
  }

  .video-container {
  width: 100%;
  max-width: 800px; /* Ajuste selon tes besoins */
  margin: 2rem auto;
  overflow: hidden;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
}

  .video-container video {
    width: 100%;
    height: auto;
    display: block;
    object-fit: cover;
  }


  @keyframes glitch-effect {
    0% {
      transform: translate(0);
    }
    20% {
      transform: translate(-3px, 3px);
    }
    40% {
      transform: translate(-3px, -3px);
    }
    60% {
      transform: translate(3px, 3px);
    }
    80% {
      transform: translate(3px, -3px);
    }
    100% {
      transform: translate(0);
    }
  }

  /* Terminal text effect */
  .terminal-text {
    font-family: monospace;
    overflow: hidden;
    border-right: 0.15em solid var(--color-accent);
    white-space: nowrap;
    letter-spacing: 0.15em;
    animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
  }

  @keyframes typing {
    from { width: 0 }
    to { width: 100% }
  }

  @keyframes blink-caret {
    from, to { border-color: transparent }
    50% { border-color: var(--color-accent) }
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .container {
      padding: 0 1rem;
    }
  }
</style>