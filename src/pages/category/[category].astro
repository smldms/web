---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from "astro:content";

// Récupérer le paramètre de catégorie depuis l'URL
export async function getStaticPaths() {
  const categories = [
    { id: "generative-art", label: "Generative Art" },
    { id: "runtime-art", label: "Runtime Art" },
    { id: "post-photography", label: "Post Photography" }
  ];
  
  return categories.map(category => ({
    params: { category: category.id },
    props: { category }
  }));
}

const { category } = Astro.props;
const projects = await getCollection("projects");

// Filtrer les projets par catégorie
const filteredProjects = projects.filter(project => 
  Array.isArray(project.data.categories) && 
  project.data.categories.includes(category.id)
);

// Fonction pour attribuer une taille aléatoire aux éléments de la grille
function getRandomSize() {
  const sizes = ['small', 'medium', 'large', 'wide', 'tall'];
  const randomIndex = Math.floor(Math.random() * sizes.length);
  return sizes[randomIndex];
}

// Attribuer une taille à chaque projet
const projectsWithSize = filteredProjects.map(project => ({
  project,
  size: getRandomSize()
}));
---

<Layout>
  <Header />
  
  <main class="category-page">
    <div class="hero-section">
      <div class="container">
        <h1 class="page-title glitch" data-text={category.label}>{category.label}</h1>
        <p class="page-description">Découvrez mes projets dans la catégorie {category.label}.</p>
      </div>
    </div>
    
    <div class="container">
      {filteredProjects.length > 0 ? (
        <div class="masonry-grid">
          {projectsWithSize.map(({ project, size }) => (
            <a href={`/projects/${project.slug}`} class={`masonry-item ${size}`}>
              <div class="project-image-container">
                <img 
                  src={project.data.coverImage} 
                  alt={project.data.title} 
                  class="project-image"
                  loading="lazy"
                />
                <div class="project-overlay">
                  <h3 class="project-title">{project.data.title}</h3>
                  <p class="project-description">{project.data.description}</p>
                </div>
                <div class="glitch-effect"></div>
              </div>
            </a>
          ))}
        </div>
      ) : (
        <div class="empty-category">
          <h2>Aucun projet trouvé</h2>
          <p>Il n'y a pas encore de projets dans la catégorie {category.label}.</p>
          <a href="/" class="cyber-button">
            <span></span>
            <span></span>
            <span></span>
            <span></span>
            Retour à l'accueil
          </a>
        </div>
      )}
    </div>
  </main>
  
  <Footer />
</Layout>

<style>
  .category-page {
    padding-top: 80px;
  }

  .hero-section {
    padding: 6rem 0 3rem;
    text-align: center;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.7), var(--color-background));
  }

  .page-title {
    font-size: 4rem;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  .page-description {
    font-size: 1.2rem;
    max-width: 600px;
    margin: 0 auto;
    color: var(--color-text-light);
  }

  /* Masonry Grid */
  .masonry-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    grid-auto-rows: 250px;
    grid-auto-flow: dense;
    gap: 1rem;
    margin: 3rem 0;
  }

  .masonry-item {
    position: relative;
    overflow: hidden;
    border-radius: var(--border-radius);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: var(--shadow-md);
  }

  /* Différentes tailles pour la grille masonry */
  .masonry-item.medium {
    grid-column: span 2;
  }

  .masonry-item.large {
    grid-column: span 2;
    grid-row: span 2;
  }

  .masonry-item.wide {
    grid-column: span 2;
  }

  .masonry-item.tall {
    grid-row: span 2;
  }

  .masonry-item:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: var(--shadow-lg), 0 0 15px var(--color-accent-glow);
    z-index: 2;
  }

  .project-image-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease, filter 0.3s ease;
  }

  .masonry-item:hover .project-image {
    transform: scale(1.05);
    filter: contrast(120%) brightness(110%) saturate(130%);
  }

  .project-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 1.5rem;
    opacity: 0;
    transition: opacity 0.3s ease;
    text-align: center;
  }

  .masonry-item:hover .project-overlay {
    opacity: 1;
  }

  .project-title {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: var(--color-accent);
    text-shadow: 0 0 10px var(--color-accent-glow);
  }

  .project-description {
    font-size: 0.95rem;
    line-height: 1.5;
    color: #fff;
    margin: 0;
    max-width: 100%;
  }

  /* Effet glitch sur les images au survol */
  .glitch-effect {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(74, 108, 247, 0.2), transparent);
    mix-blend-mode: overlay;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 2;
  }

  .masonry-item:hover .glitch-effect {
    opacity: 1;
    animation: glitch-animation 0.5s infinite;
  }

  @keyframes glitch-animation {
    0% {
      background-position: 0 0;
      filter: hue-rotate(0deg);
    }
    10% {
      background-position: 5px 0;
    }
    20% {
      background-position: -5px 0;
    }
    30% {
      background-position: 15px 0;
    }
    40% {
      background-position: 5px 0;
    }
    50% {
      background-position: -25px 0;
      filter: hue-rotate(180deg);
    }
    60% {
      background-position: -5px 0;
    }
    70% {
      background-position: 0 -10px;
    }
    80% {
      background-position: -15px 0;
    }
    90% {
      background-position: 10px 0;
    }
    100% {
      background-position: 0 0;
      filter: hue-rotate(360deg);
    }
  }

  .masonry-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      to bottom,
      transparent,
      transparent 2px,
      rgba(255, 255, 255, 0.05) 2px,
      rgba(255, 255, 255, 0.05) 4px
    );
    z-index: 3;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .masonry-item:hover::before {
    opacity: 1;
    animation: pixelate 0.5s steps(10) infinite;
  }

  @keyframes pixelate {
    0% {
      background-size: 100% 100%;
    }
    25% {
      background-size: 300% 100%;
    }
    50% {
      background-size: 100% 300%;
    }
    75% {
      background-size: 400% 100%;
    }
    100% {
      background-size: 100% 100%;
    }
  }

  /* Message quand aucun projet n'est trouvé */
  .empty-category {
    text-align: center;
    padding: 4rem 2rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: var(--border-radius);
    border: 1px solid rgba(74, 108, 247, 0.3);
    margin: 3rem 0;
  }

  .empty-category h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: var(--color-accent);
  }

  .empty-category p {
    margin-bottom: 2rem;
    color: var(--color-text-light);
  }

  /* Bouton Cyber */
  .cyber-button {
    position: relative;
    display: inline-block;
    padding: 0.75rem 1.5rem;
    color: var(--color-accent);
    text-decoration: none;
    text-transform: uppercase;
    letter-spacing: 2px;
    font-size: 0.875rem;
    overflow: hidden;
    transition: 0.5s;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid var(--color-accent);
  }

  .cyber-button:hover {
    background: var(--color-accent);
    color: #fff;
    box-shadow: 0 0 5px var(--color-accent),
                0 0 25px var(--color-accent),
                0 0 50px var(--color-accent),
                0 0 200px var(--color-accent);
  }

  .cyber-button span {
    position: absolute;
    display: block;
  }

  .cyber-button span:nth-child(1) {
    top: 0;
    left: -100%;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--color-accent));
    animation: btn-anim1 1s linear infinite;
  }

  @keyframes btn-anim1 {
    0% {
      left: -100%;
    }
    50%,100% {
      left: 100%;
    }
  }

  .cyber-button span:nth-child(2) {
    top: -100%;
    right: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(180deg, transparent, var(--color-accent));
    animation: btn-anim2 1s linear infinite;
    animation-delay: 0.25s;
  }

  @keyframes btn-anim2 {
    0% {
      top: -100%;
    }
    50%,100% {
      top: 100%;
    }
  }

  .cyber-button span:nth-child(3) {
    bottom: 0;
    right: -100%;
    width: 100%;
    height: 2px;
    background: linear-gradient(270deg, transparent, var(--color-accent));
    animation: btn-anim3 1s linear infinite;
    animation-delay: 0.5s;
  }

  @keyframes btn-anim3 {
    0% {
      right: -100%;
    }
    50%,100% {
      right: 100%;
    }
  }

  .cyber-button span:nth-child(4) {
    bottom: -100%;
    left: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(360deg, transparent, var(--color-accent));
    animation: btn-anim4 1s linear infinite;
    animation-delay: 0.75s;
  }

  @keyframes btn-anim4 {
    0% {
      bottom: -100%;
    }
    50%,100% {
      bottom: 100%;
    }
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .masonry-grid {
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      grid-auto-rows: 200px;
    }
  }

  @media (max-width: 768px) {
    .page-title {
      font-size: 2.5rem;
    }

    .masonry-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      grid-auto-rows: 150px;
    }

    .masonry-item.medium,
    .masonry-item.large,
    .masonry-item.wide {
      grid-column: span 1;
    }

    .masonry-item.large,
    .masonry-item.tall {
      grid-row: span 1;
    }

    .project-title {
      font-size: 1.2rem;
    }

    .project-description {
      font-size: 0.8rem;
    }
  }

  @media (max-width: 480px) {
    .masonry-grid {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .masonry-item {
      height: 250px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Animation au scroll pour les éléments de la grille
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1
    });
    
    document.querySelectorAll('.masonry-item').forEach((item, index) => {
      // Ajouter un délai progressif pour l'animation
      item.style.opacity = '0';
      item.style.transform = 'translateY(20px)';
      item.style.transition = `opacity 0.5s ease ${index * 0.05}s, transform 0.5s ease ${index * 0.05}s`;
      
      setTimeout(() => {
        item.style.opacity = '1';
        item.style.transform = 'translateY(0)';
      }, 100);
      
      observer.observe(item);
    });

    // Effet de glitch aléatoire sur les éléments au survol
    document.querySelectorAll('.masonry-item').forEach(item => {
      item.addEventListener('mouseenter', () => {
        const glitchEffect = item.querySelector('.glitch-effect');
        if (glitchEffect) {
          const randomDelay = Math.random() * 0.5;
          const randomDuration = 0.3 + Math.random() * 0.4;
          
          glitchEffect.style.animationDelay = `${randomDelay}s`;
          glitchEffect.style.animationDuration = `${randomDuration}s`;
        }
      });
    });
  });
</script>