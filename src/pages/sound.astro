---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getCollection, getEntry } from "astro:content";

// Récupérer les paramètres de la page Sound
let soundSettings;
try {
  soundSettings = await getEntry('settings', 'sound');
} catch (error) {
  // Valeurs par défaut si le fichier de configuration n'existe pas
  soundSettings = {
    data: {
      pageTitle: "SOUND",
      pageDescription: "Explorez mes créations sonores et performances DJ",
      tracksTitle: "Tracks",
      djSetsTitle: "DJ Sets",
      collaborationsTitle: "Collaborations"
    }
  };
}

// Récupérer toutes les pistes audio
let allSoundtracks = [];
try {
  allSoundtracks = await getCollection("soundtracks");
} catch (error) {
  console.error("Erreur lors de la récupération des soundtracks:", error);
}

// Filtrer par type
const tracks = allSoundtracks.filter(track => track.data.type === 'track')
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

const djSets = allSoundtracks.filter(track => track.data.type === 'dj-set')
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

const collaborations = allSoundtracks.filter(track => track.data.type === 'collaboration')
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Fonction pour extraire l'ID de la piste Soundcloud à partir de l'URL
function getSoundcloudEmbedUrl(url) {
  return `https://w.soundcloud.com/player/?url=${encodeURIComponent(url)}&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true`;
}

// Fonction pour extraire l'ID de la vidéo YouTube à partir de l'URL
function getYoutubeVideoId(url) {
  if (!url) return null;
  
  // Formats possibles: 
  // - https://www.youtube.com/watch?v=VIDEO_ID
  // - https://youtu.be/VIDEO_ID
  // - https://youtube.com/embed/VIDEO_ID
  
  const regExp = /^.*(youtu.be\/|v\/|e\/|u\/\w+\/|embed\/|v=)([^#\&\?]*).*/;
  const match = url.match(regExp);
  
  return (match && match[2].length === 11) ? match[2] : null;
}

// Formater la date
function formatDate(date) {
  return new Intl.DateTimeFormat('fr-FR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}
---

<Layout>
  <Header />
  
  <main class="sound-page">
    <div class="hero-section">
      <div class="container">
        <h1 class="page-title glitch" data-text={soundSettings.data.pageTitle}>{soundSettings.data.pageTitle}</h1>
        <p class="page-description">{soundSettings.data.pageDescription}</p>
      </div>
    </div>
    
    <div class="container">
      <div class="sound-grid">
        <!-- Section Tracks -->
        {tracks.length > 0 ? (
          <section class="sound-section">
            <h2 class="section-title glitch" data-text={soundSettings.data.tracksTitle}>{soundSettings.data.tracksTitle}</h2>
            
            <div class="tracks-grid">
              {tracks.map((track) => (
                <div class="track-item">
                  <div class="track-artwork">
                    <img src={track.data.coverImage} alt={track.data.title} />
                    <div class="play-button" data-url={track.data.soundcloudUrl}>
                      <span class="play-icon">▶</span>
                    </div>
                    <div class="glitch-effect"></div>
                  </div>
                  <div class="track-info">
                    <h3>{track.data.title}</h3>
                    <p>{track.data.description}</p>
                    <div class="track-meta">
                      <span class="track-date">{formatDate(track.data.date)}</span>
                      <div class="track-tags">
                        {track.data.tags.map(tag => (
                          <span class="tag">{tag}</span>
                        ))}
                      </div>
                    </div>
                    <div class="soundcloud-embed" id={`embed-${track.slug}`} style="display: none;">
                      <iframe
                        width="100%"
                        height="166"
                        scrolling="no"
                        frameborder="no"
                        src={getSoundcloudEmbedUrl(track.data.soundcloudUrl)}
                      ></iframe>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        ) : (
          <section class="sound-section empty-section">
            <h2 class="section-title glitch" data-text={soundSettings.data.tracksTitle}>{soundSettings.data.tracksTitle}</h2>
            <div class="empty-message">
              <p>Aucune piste audio n'a encore été ajoutée.</p>
              <p>Vous pouvez ajouter des pistes via l'<a href="/admin" class="admin-link">interface d'administration</a>.</p>
            </div>
          </section>
        )}
        
        <!-- Section DJ Sets -->
        {djSets.length > 0 ? (
          <section class="sound-section">
            <h2 class="section-title glitch" data-text={soundSettings.data.djSetsTitle}>{soundSettings.data.djSetsTitle}</h2>
            
            <div class="djsets-grid">
              {djSets.map((djSet) => (
                <div class="djset-item">
                  <div class="djset-header" style={`background-image: url(${djSet.data.coverImage})`}>
                    <div class="djset-overlay">
                      <h3>{djSet.data.title}</h3>
                      <p>{djSet.data.description}</p>
                    </div>
                  </div>
                  
                  {/* Afficher la vidéo YouTube si disponible */}
                  {djSet.data.youtubeUrl && getYoutubeVideoId(djSet.data.youtubeUrl) && (
                    <div class="djset-video">
                      <div class="video-container">
                        <iframe
                          width="100%"
                          height="315"
                          src={`https://www.youtube.com/embed/${getYoutubeVideoId(djSet.data.youtubeUrl)}`}
                          title={djSet.data.title}
                          frameborder="0"
                          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                          allowfullscreen
                        ></iframe>
                        <div class="glitch-overlay"></div>
                      </div>
                    </div>
                  )}
                  
                  <div class="djset-player">
                    <iframe
                      width="100%"
                      height="166"
                      scrolling="no"
                      frameborder="no"
                      src={getSoundcloudEmbedUrl(djSet.data.soundcloudUrl)}
                    ></iframe>
                  </div>
                  <div class="djset-info">
                    <div class="djset-meta">
                      <span class="djset-date">{formatDate(djSet.data.date)}</span>
                      <div class="djset-tags">
                        {djSet.data.tags.map(tag => (
                          <span class="tag">{tag}</span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        ) : (
          <section class="sound-section empty-section">
            <h2 class="section-title glitch" data-text={soundSettings.data.djSetsTitle}>{soundSettings.data.djSetsTitle}</h2>
            <div class="empty-message">
              <p>Aucun DJ set n'a encore été ajouté.</p>
              <p>Vous pouvez ajouter des DJ sets via l'<a href="/admin" class="admin-link">interface d'administration</a>.</p>
            </div>
          </section>
        )}
        
        <!-- Section Collaborations -->
        {collaborations.length > 0 ? (
          <section class="sound-section">
            <h2 class="section-title glitch" data-text={soundSettings.data.collaborationsTitle}>{soundSettings.data.collaborationsTitle}</h2>
            
            <div class="collab-grid">
              {collaborations.map((collab) => (
                <div class="collab-item">
                  <div class="collab-image">
                    <img src={collab.data.coverImage} alt={collab.data.title} />
                    <div class="glitch-effect"></div>
                  </div>
                  <div class="collab-info">
                    <h3>{collab.data.title}</h3>
                    <p>{collab.data.description}</p>
                    
                    {/* Afficher la vidéo YouTube si disponible */}
                    {collab.data.youtubeUrl && getYoutubeVideoId(collab.data.youtubeUrl) && (
                      <div class="collab-video">
                        <iframe
                          width="100%"
                          height="215"
                          src={`https://www.youtube.com/embed/${getYoutubeVideoId(collab.data.youtubeUrl)}`}
                          title={collab.data.title}
                          frameborder="0"
                          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                          allowfullscreen
                        ></iframe>
                      </div>
                    )}
                    
                    <div class="collab-player">
                      <iframe
                        width="100%"
                        height="166"
                        scrolling="no"
                        frameborder="no"
                        src={getSoundcloudEmbedUrl(collab.data.soundcloudUrl)}
                      ></iframe>
                    </div>
                    <div class="collab-meta">
                      <span class="collab-date">{formatDate(collab.data.date)}</span>
                      <div class="collab-tags">
                        {collab.data.tags.map(tag => (
                          <span class="tag">{tag}</span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        ) : null}

        {/* Message si aucun contenu n'est disponible */}
        {tracks.length === 0 && djSets.length === 0 && collaborations.length === 0 && (
          <div class="no-content">
            <h2 class="glitch" data-text="Aucun contenu disponible">Aucun contenu disponible</h2>
            <p>Vous n'avez pas encore ajouté de contenu audio à votre site.</p>
            <p>Utilisez l'<a href="/admin" class="admin-link">interface d'administration</a> pour ajouter des pistes, des DJ sets ou des collaborations.</p>
          </div>
        )}
      </div>
    </div>
  </main>
  
  <Footer />
</Layout>

<style>
  .sound-page {
    padding-top: 80px;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), var(--color-background)),
                url('/images/uploads/lxst_child_foggy_red_and_purple_hue_neon_extreme_brutalism_clou_0df11c47-adbd-405c-9bca-f17380d46565.png');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    background-blend-mode: overlay;
  }

  .sound-page::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      to bottom,
      transparent,
      transparent 2px,
      rgba(255, 255, 255, 0.03) 2px,
      rgba(255, 255, 255, 0.03) 4px
    );
    pointer-events: none;
    z-index: -1;
  }

  .hero-section {
    padding: 8rem 0 4rem;
    text-align: center;
    position: relative;
    overflow: hidden;
  }

  .hero-section::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100px;
    background: linear-gradient(to top, var(--color-background), transparent);
  }

  .page-title {
    font-size: 5rem;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.2em;
    text-shadow: 0 0 10px var(--color-accent-glow);
  }

  .page-description {
    font-size: 1.5rem;
    max-width: 600px;
    margin: 0 auto;
    color: var(--color-text-light);
    font-weight: 300;
    letter-spacing: 0.05em;
  }

  .sound-grid {
    display: flex;
    flex-direction: column;
    gap: 6rem;
    padding: 2rem 0 6rem;
  }

  .sound-section {
    position: relative;
  }

  .section-title {
    font-size: 2.5rem;
    margin-bottom: 3rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    display: inline-block;
    position: relative;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, var(--color-accent), transparent);
  }

  /* Message quand aucun contenu n'est disponible */
  .empty-section {
    min-height: 200px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  .empty-message {
    padding: 2rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: var(--border-radius);
    border: 1px solid rgba(74, 108, 247, 0.3);
    text-align: center;
    width: 100%;
  }

  .empty-message p {
    margin-bottom: 1rem;
    color: var(--color-text-light);
  }

  .admin-link {
    color: var(--color-accent);
    text-decoration: underline;
    transition: color 0.3s ease, text-shadow 0.3s ease;
  }

  .admin-link:hover {
    color: #fff;
    text-shadow: 0 0 8px var(--color-accent-glow);
  }

  .no-content {
    text-align: center;
    padding: 4rem 2rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: var(--border-radius);
    border: 1px solid rgba(74, 108, 247, 0.3);
    margin: 2rem 0;
  }

  .no-content h2 {
    font-size: 2.5rem;
    margin-bottom: 2rem;
  }

  .no-content p {
    margin-bottom: 1rem;
    color: var(--color-text-light);
    font-size: 1.1rem;
  }

  /* Tracks Grid */
  .tracks-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  .track-item {
    background: rgba(0, 0, 0, 0.5);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid rgba(74, 108, 247, 0.3);
  }

  .track-item:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-lg), 0 0 20px rgba(74, 108, 247, 0.4);
  }

  .track-artwork {
    position: relative;
    aspect-ratio: 1/1;
    overflow: hidden;
  }

  .track-artwork img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease, filter 0.3s ease;
  }

  .track-item:hover .track-artwork img {
    transform: scale(1.05);
    filter: contrast(120%) brightness(110%) saturate(130%);
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    background: rgba(74, 108, 247, 0.8);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease, transform 0.3s ease;
    cursor: pointer;
    z-index: 3;
  }

  .play-icon {
    font-size: 1.5rem;
    color: white;
  }

  .track-item:hover .play-button {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  .play-button:hover {
    transform: translate(-50%, -50%) scale(1.1);
    background: rgba(74, 108, 247, 1);
    box-shadow: 0 0 15px rgba(74, 108, 247, 0.8);
  }

  .track-info {
    padding: 1.5rem;
  }

  .track-info h3 {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
    color: var(--color-accent);
  }

  .track-info p {
    font-size: 0.9rem;
    color: var(--color-text-light);
    margin-bottom: 1rem;
  }

  .track-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.8rem;
  }

  .track-date {
    color: var(--color-text-light);
  }

  .track-tags {
    display: flex;
    gap: 0.5rem;
  }

  .tag {
    background: rgba(74, 108, 247, 0.2);
    padding: 0.2rem 0.5rem;
    border-radius: 50px;
    font-size: 0.7rem;
    color: var(--color-text-light);
    border: 1px solid rgba(74, 108, 247, 0.3);
  }

  .soundcloud-embed {
    margin-top: 1rem;
  }

  /* DJ Sets Grid */
  .djsets-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
    gap: 2rem;
  }

  .djset-item {
    background: rgba(0, 0, 0, 0.5);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid rgba(74, 108, 247, 0.3);
  }

  .djset-item:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-lg), 0 0 20px rgba(74, 108, 247, 0.4);
  }

  .djset-header {
    height: 200px;
    background-size: cover;
    background-position: center;
    position: relative;
  }

  .djset-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.8));
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    padding: 1.5rem;
  }

  .djset-overlay h3 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  }

  .djset-overlay p {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.8);
  }

  /* YouTube Video Container */
  .djset-video {
    width: 100%;
    margin-bottom: 1rem;
  }

  .video-container {
    position: relative;
    width: 100%;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
    overflow: hidden;
  }

  .video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
  }

  .glitch-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(74, 108, 247, 0.1), transparent);
    mix-blend-mode: overlay;
    pointer-events: none;
    z-index: 2;
    opacity: 0.5;
  }

  .glitch-overlay::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      to bottom,
      transparent,
      transparent 2px,
      rgba(74, 108, 247, 0.05) 2px,
      rgba(74, 108, 247, 0.05) 4px
    );
    animation: scanlines 8s linear infinite;
    opacity: 0.3;
  }

  @keyframes scanlines {
    0% {
      transform: translateY(0);
    }
    100% {
      transform: translateY(100%);
    }
  }

  .djset-player {
    width: 100%;
  }

  .djset-info {
    padding: 1rem 1.5rem;
  }

  .djset-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
  }

  .djset-date {
    color: var(--color-text-light);
  }

  .djset-tags {
    display: flex;
    gap: 0.5rem;
  }

  /* Collaborations Grid */
  .collab-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(500px, 1fr));
    gap: 3rem;
  }

  .collab-item {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 1.5rem;
    background: rgba(0, 0, 0, 0.5);
    border-radius: var(--border-radius);
    overflow: hidden;
    padding: 1.5rem;
    box-shadow: var(--shadow-md);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid rgba(74, 108, 247, 0.3);
  }

  .collab-item:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-lg), 0 0 20px rgba(74, 108, 247, 0.4);
  }

  .collab-image {
    position: relative;
    overflow: hidden;
    border-radius: var(--border-radius);
    aspect-ratio: 1/1;
  }

  .collab-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .collab-item:hover .collab-image img {
    transform: scale(1.05);
  }

  .collab-info {
    display: flex;
    flex-direction: column;
  }

  .collab-info h3 {
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
    color: var(--color-accent);
  }

  .collab-info p {
    font-size: 0.9rem;
    color: var(--color-text-light);
    margin-bottom: 1rem;
  }

  .collab-video {
    margin-bottom: 1rem;
    border-radius: var(--border-radius);
    overflow: hidden;
    position: relative;
  }

  .collab-player {
    margin-bottom: 1rem;
  }

  .collab-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
    margin-top: auto;
  }

  .collab-date {
    color: var(--color-text-light);
  }

  .collab-tags {
    display: flex;
    gap: 0.5rem;
  }

  /* Glitch Effect */
  .glitch-effect {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(74, 108, 247, 0.2), transparent);
    mix-blend-mode: overlay;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: 2;
  }

  .track-item:hover .glitch-effect,
  .collab-item:hover .glitch-effect {
    opacity: 1;
    animation: glitch-animation 0.5s infinite;
  }

  @keyframes glitch-animation {
    0% {
      background-position: 0 0;
      filter: hue-rotate(0deg);
    }
    10% {
      background-position: 5px 0;
    }
    20% {
      background-position: -5px 0;
    }
    30% {
      background-position: 15px 0;
    }
    40% {
      background-position: 5px 0;
    }
    50% {
      background-position: -25px 0;
      filter: hue-rotate(180deg);
    }
    60% {
      background-position: -5px 0;
    }
    70% {
      background-position: 0 -10px;
    }
    80% {
      background-position: -15px 0;
    }
    90% {
      background-position: 10px 0;
    }
    100% {
      background-position: 0 0;
      filter: hue-rotate(360deg);
    }
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .collab-grid {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .page-title {
      font-size: 3rem;
    }

    .djsets-grid {
      grid-template-columns: 1fr;
    }

    .collab-item {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .collab-image {
      aspect-ratio: 16/9;
    }
  }

  @media (max-width: 480px) {
    .page-title {
      font-size: 2.5rem;
    }

    .page-description {
      font-size: 1rem;
    }

    .section-title {
      font-size: 2rem;
    }

    .tracks-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Animation au scroll pour les sections
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          
          // Animer les éléments avec un délai
          const items = entry.target.querySelectorAll('.track-item, .djset-item, .collab-item');
          items.forEach((item, index) => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = `opacity 0.5s ease ${index * 0.1}s, transform 0.5s ease ${index * 0.1}s`;
            
            setTimeout(() => {
              item.style.opacity = '1';
              item.style.transform = 'translateY(0)';
            }, 100);
          });
          
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.2
    });
    
    document.querySelectorAll('.sound-section').forEach(section => {
      observer.observe(section);
    });

    // Gestion des boutons de lecture pour afficher le lecteur Soundcloud
    const playButtons = document.querySelectorAll('.play-button');
    
    playButtons.forEach(button => {
      button.addEventListener('click', () => {
        const trackItem = button.closest('.track-item');
        const trackId = trackItem.querySelector('.soundcloud-embed')?.id;
        
        if (trackId) {
          const embedElement = document.getElementById(trackId);
          
          if (embedElement.style.display === 'none') {
            embedElement.style.display = 'block';
            button.querySelector('.play-icon').textContent = '⏸';
          } else {
            embedElement.style.display = 'none';
            button.querySelector('.play-icon').textContent = '▶';
          }
        }
      });
    });
  });
</script>